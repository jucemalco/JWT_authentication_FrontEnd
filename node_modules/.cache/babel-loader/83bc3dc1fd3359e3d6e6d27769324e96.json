{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\JWT\\\\FrontEnd\\\\src\\\\store\\\\appContext.js\";\nimport React, { useState, useEffect } from \"react\";\nimport getState from \"./flux.js\"; // Don't change, here is where we initialize our context, by default it's just going to be null.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/React.createContext(null); // This function injects the global store to any view/component where you want to use it, we will inject the context to layout.js, you can see it here:\n// https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/js/layout.js#L35\n\nconst injectContext = PassedComponent => {\n  var _s = $RefreshSig$();\n\n  const StoreWrapper = props => {\n    _s();\n\n    //this will be passed as the contenxt value\n    const [state, setState] = useState(getState({\n      getStore: () => state.store,\n      getActions: () => state.actions,\n      setStore: updatedStore => setState({\n        store: Object.assign(state.store, updatedStore),\n        actions: { ...state.actions\n        }\n      })\n    }));\n    useEffect(() => {\n      /**\n       * EDIT THIS!\n       * This function is the equivalent to \"window.onLoad\", it only runs once on the entire application lifetime\n       * you should do your ajax requests or fetch api requests here. Do not use setState() to save data in the\n       * store, instead use actions, like this:\n       **/\n      //   state.actions.getMessage(); // <---- calling this function from the flux.js actions\n    }, []); // The initial value for the context is not null anymore, but the current state of this component,\n    // the context will now have a getStore, getActions and setStore functions available, because they were declared\n    // on the state of this component\n\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: state,\n      children: /*#__PURE__*/_jsxDEV(PassedComponent, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(StoreWrapper, \"XQwcDk+b7FnjC19An9L3rYfEeyg=\");\n\n  return StoreWrapper;\n};\n\nexport default injectContext;","map":{"version":3,"sources":["C:/Users/HP/Desktop/JWT/FrontEnd/src/store/appContext.js"],"names":["React","useState","useEffect","getState","Context","createContext","injectContext","PassedComponent","StoreWrapper","props","state","setState","getStore","store","getActions","actions","setStore","updatedStore","Object","assign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;;AACA,OAAO,MAAMC,OAAO,gBAAGJ,KAAK,CAACK,aAAN,CAAoB,IAApB,CAAhB,C,CAEP;AACA;;AACA,MAAMC,aAAa,GAAIC,eAAD,IAAqB;AAAA;;AACzC,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAChCE,QAAQ,CAAC;AACPS,MAAAA,QAAQ,EAAE,MAAMF,KAAK,CAACG,KADf;AAEPC,MAAAA,UAAU,EAAE,MAAMJ,KAAK,CAACK,OAFjB;AAGPC,MAAAA,QAAQ,EAAGC,YAAD,IACRN,QAAQ,CAAC;AACPE,QAAAA,KAAK,EAAEK,MAAM,CAACC,MAAP,CAAcT,KAAK,CAACG,KAApB,EAA2BI,YAA3B,CADA;AAEPF,QAAAA,OAAO,EAAE,EAAE,GAAGL,KAAK,CAACK;AAAX;AAFF,OAAD;AAJH,KAAD,CADwB,CAAlC;AAYAb,IAAAA,SAAS,CAAC,MAAM;AACd;AACN;AACA;AACA;AACA;AACA;AACM;AACD,KARQ,EAQN,EARM,CAAT,CAd8B,CAwB9B;AACA;AACA;;AACA,wBACE,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAEQ,KAAzB;AAAA,6BACE,QAAC,eAAD,OAAqBD;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAhCD;;AADyC,KACnCD,YADmC;;AAkCzC,SAAOA,YAAP;AACD,CAnCD;;AAqCA,eAAeF,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport getState from \"./flux.js\";\n\n// Don't change, here is where we initialize our context, by default it's just going to be null.\nexport const Context = React.createContext(null);\n\n// This function injects the global store to any view/component where you want to use it, we will inject the context to layout.js, you can see it here:\n// https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/js/layout.js#L35\nconst injectContext = (PassedComponent) => {\n  const StoreWrapper = (props) => {\n    //this will be passed as the contenxt value\n    const [state, setState] = useState(\n      getState({\n        getStore: () => state.store,\n        getActions: () => state.actions,\n        setStore: (updatedStore) =>\n          setState({\n            store: Object.assign(state.store, updatedStore),\n            actions: { ...state.actions },\n          }),\n      })\n    );\n\n    useEffect(() => {\n      /**\n       * EDIT THIS!\n       * This function is the equivalent to \"window.onLoad\", it only runs once on the entire application lifetime\n       * you should do your ajax requests or fetch api requests here. Do not use setState() to save data in the\n       * store, instead use actions, like this:\n       **/\n      //   state.actions.getMessage(); // <---- calling this function from the flux.js actions\n    }, []);\n\n    // The initial value for the context is not null anymore, but the current state of this component,\n    // the context will now have a getStore, getActions and setStore functions available, because they were declared\n    // on the state of this component\n    return (\n      <Context.Provider value={state}>\n        <PassedComponent {...props} />\n      </Context.Provider>\n    );\n  };\n  return StoreWrapper;\n};\n\nexport default injectContext;\n"]},"metadata":{},"sourceType":"module"}